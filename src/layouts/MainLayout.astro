---
import MainHead from "./MainHead.astro";
import Icon from "astro-icon";

import Footer from "../components/Footer.astro";
import Nav from "../components/Nav.astro";

import neonData from "../data/neonData";
import "../styles/main.css";
import "@fontsource-variable/albert-sans";
import "@fontsource/tilt-neon";
interface Props {
  title?: string;
}

const { title = "Dave Tierney's website" } = Astro.props;
---

<html lang="en">
  <MainHead title={title} />
  <body class="bg-background text-primary">
    <Nav />
    <section class="relative flex flex-col items-center">
      <div class="flex items-center justify-center gap-2 py-4">
        <button
          class="group grid h-8 w-8 place-items-center rounded-sm border-2 border-neon border-opacity-30 shadow transition duration-300 hover:border-opacity-100 hover:bg-neon hover:bg-opacity-5 hover:shadow-glow hover:shadow-neon"
          data-theme-toggle
          aria-label="toggle theme"
        >
          <Icon
            name="bx:bxs-sun"
            class="h-4 w-4 text-primary transition duration-300 group-hover:text-neon"
          />
        </button>
        <button
          class="group grid h-8 w-8 place-items-center rounded-sm border-2 border-neon border-opacity-30 shadow transition duration-300 hover:border-opacity-100 hover:bg-neon hover:bg-opacity-5 hover:shadow-glow hover:shadow-neon"
          data-neon-toggle
          aria-label="select color"
        >
          <Icon
            name="ic:outline-palette"
            class="h-4 w-4 text-primary transition duration-300 group-hover:text-neon"
          />
        </button>
      </div>
      <div
        data-neon-container
        class="invisible absolute top-16 z-10 max-w-sm rounded-sm border-2 border-neon border-opacity-30 shadow transition duration-300 hover:border-opacity-100 hover:bg-neon hover:bg-opacity-5 hover:shadow-glow hover:shadow-neon"
      >
        <div
          class="flex flex-col content-center gap-3 bg-background bg-opacity-90 p-4 text-center font-bold text-primary sm:gap-4 sm:p-8"
        >
          <h2 class="text-xl font-bold">Color select</h2>
          <div class="flex justify-evenly gap-3 sm:gap-4">
            {
              neonData.map((color) => (
                <label for={`btn-${color.name}`} class="relative inline-flex">
                  <input
                    id={`btn-${color.name}`}
                    type="radio"
                    name="color"
                    value={color.name}
                    class={`absolute -z-10 h-6 w-6 appearance-none rounded-sm checked:z-10 checked:border checked:border-gray-900 ${color.hex.input} checked:outline checked:outline-white`}
                  />
                  <span class="sr-only absolute">Set neon to {color.name}</span>
                  <div
                    class={`h-6 w-6 rounded-sm border border-gray-900 border-opacity-75 ${color.hex.div} bg-opacity-60 shadow shadow-gray-900 hover:border-none hover:bg-opacity-100 hover:shadow-none hover:outline hover:outline-white`}
                  />
                </label>
              ))
            }
          </div>
          <button
            class="group mt-2 grid h-8 w-8 place-items-center self-center rounded-sm border-2 border-neon border-opacity-30 shadow transition duration-300 hover:border-opacity-100 hover:bg-neon hover:bg-opacity-5 hover:shadow-glow hover:shadow-neon"
            data-neon-close
            aria-label="close neon select container"
          >
            <Icon
              name="ic:baseline-close"
              class="h-4 w-4 text-primary group-hover:text-neon"
            />
          </button>
        </div>
      </div>
    </section>

    <main>
      <slot />
    </main>
    <Footer />
    <script>
      // Light and dark theme functions
      const themeToggles = document.querySelectorAll("[data-theme-toggle]");

      const getTheme = () => {
        if (typeof localStorage !== "undefined") {
          const theme = localStorage.getItem("theme");
          if (theme === "dark" || theme === "light") {
            return theme;
          }
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };

      const setTheme = (theme: string) =>
        document.documentElement.setAttribute("data-theme", theme);

      window.addEventListener("DOMContentLoaded", () => setTheme(getTheme()));
      // document.addEventListener("astro:after-swap", () => setTheme(getTheme()));

      themeToggles.forEach((toggle) => {
        toggle.addEventListener("click", () => {
          const nextTheme = getTheme() === "light" ? "dark" : "light";
          localStorage.setItem("theme", nextTheme);
          setTheme(nextTheme);
        });
      });
      // Neon color selectors
      const neonContainer = document.querySelector(
        "[data-neon-container]",
      ) as HTMLElement;

      const neonToggle = document.querySelector(
        "[data-neon-toggle]",
      ) as HTMLElement;

      const neonClose = document.querySelector(
        "[data-neon-close]",
      ) as HTMLElement;

      // Neon color listeners
      neonToggle.addEventListener("click", () => {
        neonContainer.classList.toggle("invisible");
      });

      neonClose.addEventListener("click", () => {
        neonContainer.classList.toggle("invisible");
      });

      // Neon color functions
      const getColor = () => {
        if (typeof localStorage !== "undefined") {
          const color: string = localStorage.getItem("color") || "default";
          return color;
        } else {
          return "default";
        }
      };

      const setNeonColor = (color: string) => {
        document.documentElement.setAttribute("data-neon", color);
        const neonRadio = document.getElementById(
          `btn-${color}`,
        ) as HTMLInputElement;
        neonRadio.checked = true;
      };

      window.addEventListener("DOMContentLoaded", () =>
        setNeonColor(getColor()),
      );

      const neonColors = document.querySelectorAll("[type='radio']");
      neonColors.forEach((color) => {
        color.addEventListener("change", (e: Event) => {
          console.log(e.target);
          const { name, checked, value } = e.target as HTMLInputElement;
          localStorage.setItem(name, value);
          setNeonColor(value);
        });
      });
    </script>
  </body>
</html>
