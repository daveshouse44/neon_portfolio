---
import MainHead from "./MainHead.astro";
import Footer from "../components/Footer.astro";
import Nav from "../components/Nav.astro";
import Icon from "astro-icon";

import "../styles/main.css";
import "@fontsource-variable/albert-sans";
import "@fontsource/tilt-neon";
interface Props {
  title?: string;
}

const { title = "Dave Tierney's website" } = Astro.props;
---

<html lang="en">
  <MainHead title={title} />
  <body class="bg-background text-primary">
    <Nav />
    <section class="flex items-center justify-center gap-1 p-2">
      <button
        class="group grid h-8 w-8 place-items-center rounded-sm transition duration-300 hover:bg-secondary hover:bg-opacity-30"
        data-theme-toggle
        aria-label="toggle theme"
      >
        <Icon
          name="bx:bxs-sun"
          class="h-4 w-4 text-primary group-hover:text-neon"
        />
      </button>
      <button
        class="group grid h-8 w-8 place-items-center rounded-sm transition duration-300 hover:bg-secondary hover:bg-opacity-30"
        data-neon-select
        aria-label="select color"
      >
        <Icon
          name="ic:outline-palette"
          class="h-4 w-4 text-primary group-hover:text-neon"
        />
      </button>
    </section>
    <dialog
      data-neon-modal
      class="rounded-sm border border-neon shadow-md shadow-neon"
    >
      <div
        class="flex flex-col gap-4 bg-secondary p-8 text-center font-bold text-background"
      >
        <h2>Color select</h2>
        <ul class="flex justify-evenly gap-4">
          <li
            class="h-4 w-4 rounded-sm border border-gray-900 border-opacity-75 bg-[#2cbfdd] bg-opacity-75 shadow shadow-gray-900 hover:bg-opacity-100 hover:shadow-none"
          >
          </li>
          <li
            class="h-4 w-4 rounded-sm border border-gray-900 border-opacity-75 bg-red-600 bg-opacity-75 shadow shadow-gray-900 hover:bg-opacity-100 hover:shadow-none"
          >
          </li>
          <li
            class="h-4 w-4 rounded-sm border border-gray-900 border-opacity-75 bg-orange-600 bg-opacity-75 shadow shadow-gray-900 hover:bg-opacity-100 hover:shadow-none"
          >
          </li>
          <li
            class="h-4 w-4 rounded-sm border border-gray-900 border-opacity-75 bg-yellow-600 bg-opacity-75 shadow shadow-gray-900 hover:bg-opacity-100 hover:shadow-none"
          >
          </li>
          <li
            class="h-4 w-4 rounded-sm border border-gray-900 border-opacity-75 bg-green-600 bg-opacity-75 shadow shadow-gray-900 hover:bg-opacity-100 hover:shadow-none"
          >
          </li>
          <li
            class="h-4 w-4 rounded-sm border border-gray-900 border-opacity-75 bg-blue-600 bg-opacity-75 shadow shadow-gray-900 hover:bg-opacity-100 hover:shadow-none"
          >
          </li>
          <li
            class="h-4 w-4 rounded-sm border border-gray-900 border-opacity-75 bg-violet-600 bg-opacity-75 shadow shadow-gray-900 hover:bg-opacity-100 hover:shadow-none"
          >
          </li>
        </ul>
        <button
          class="group mt-2 grid h-6 w-6 place-items-center self-center rounded-sm border border-background transition duration-300 hover:border-neon hover:bg-primary hover:bg-opacity-20"
          data-modal-close
          aria-label="close modal"
        >
          <Icon
            name="ic:baseline-close"
            class="h-4 w-4 text-background group-hover:text-neon"
          />
        </button>
      </div>
    </dialog>
    <main>
      <slot />
    </main>
    <Footer />
    <script>
      // Light and dark theme functions
      const themeToggles = document.querySelectorAll("[data-theme-toggle]");

      const getTheme = () => {
        if (typeof localStorage !== "undefined") {
          const theme = localStorage.getItem("theme");
          if (theme === "dark" || theme === "light") {
            return theme;
          }
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };

      const setTheme = (theme: string) =>
        document.documentElement.setAttribute("data-theme", theme);

      window.addEventListener("DOMContentLoaded", () => setTheme(getTheme()));
      // document.addEventListener("astro:after-swap", () => setTheme(getTheme()));

      themeToggles.forEach((toggle) => {
        toggle.addEventListener("click", () => {
          const nextTheme = getTheme() === "light" ? "dark" : "light";
          localStorage.setItem("theme", nextTheme);
          setTheme(nextTheme);
        });
      });
      // Neon theme functions
      const neonSelect = document.querySelector(
        "[data-neon-modal]",
      ) as HTMLDialogElement;
      const openModal = document.querySelector(
        "[data-neon-select]",
      ) as HTMLElement;
      const closeModal = document.querySelector(
        "[data-modal-close]",
      ) as HTMLElement;

      openModal.addEventListener("click", () => {
        neonSelect.showModal();
      });

      closeModal.addEventListener("click", () => {
        neonSelect.close();
      });
      neonSelect.addEventListener("click", (event: MouseEvent) => {
        let rect = (event.target as HTMLElement).getBoundingClientRect();

        if (
          rect.left > event.clientX ||
          rect.right < event.clientX ||
          rect.top > event.clientY ||
          rect.bottom < event.clientY
        ) {
          neonSelect.close();
        }
      });
    </script>
  </body>
</html>
